/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	examplev1 "acme.corp/pkg/apis/example/v1"
	listersexamplev1 "acme.corp/pkg/generated/listers/example/v1"
)

// WithoutVerbTypeClusterLister helps list WithoutVerbTypes across all workspaces,
// or scope down to a WithoutVerbTypeLister for one workspace.
// All objects returned here must be treated as read-only.
type WithoutVerbTypeClusterLister interface {
	// List lists all WithoutVerbTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*examplev1.WithoutVerbType, err error)
	// Cluster returns a lister that can list and get WithoutVerbTypes in one workspace.
	Cluster(clusterName logicalcluster.Name) listersexamplev1.WithoutVerbTypeLister
	WithoutVerbTypeClusterListerExpansion
}

// withoutVerbTypeClusterLister implements the WithoutVerbTypeClusterLister interface.
type withoutVerbTypeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*examplev1.WithoutVerbType]
}

var _ WithoutVerbTypeClusterLister = new(withoutVerbTypeClusterLister)

// NewWithoutVerbTypeClusterLister returns a new WithoutVerbTypeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewWithoutVerbTypeClusterLister(indexer cache.Indexer) WithoutVerbTypeClusterLister {
	return &withoutVerbTypeClusterLister{
		kcplisters.NewCluster[*examplev1.WithoutVerbType](indexer, examplev1.Resource("withoutverbtype")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get WithoutVerbTypes.
func (l *withoutVerbTypeClusterLister) Cluster(clusterName logicalcluster.Name) listersexamplev1.WithoutVerbTypeLister {
	return &withoutVerbTypeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// withoutVerbTypeLister can list all WithoutVerbTypes inside a workspace
// or scope down to a listersexamplev1.WithoutVerbTypeNamespaceLister for one namespace.
type withoutVerbTypeLister struct {
	kcplisters.ResourceIndexer[*examplev1.WithoutVerbType]
}

var _ listersexamplev1.WithoutVerbTypeLister = new(withoutVerbTypeLister)

// WithoutVerbTypes returns an object that can list and get WithoutVerbTypes in one namespace.
func (l *withoutVerbTypeLister) WithoutVerbTypes(namespace string) listersexamplev1.WithoutVerbTypeNamespaceLister {
	return &withoutVerbTypeNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// withoutVerbTypeNamespaceLister implements the listersexamplev1.WithoutVerbTypeNamespaceLister
// interface.
type withoutVerbTypeNamespaceLister struct {
	kcplisters.ResourceIndexer[*examplev1.WithoutVerbType]
}

var _ listersexamplev1.WithoutVerbTypeNamespaceLister = new(withoutVerbTypeNamespaceLister)

// NewWithoutVerbTypeLister returns a new WithoutVerbTypeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewWithoutVerbTypeLister(indexer cache.Indexer) listersexamplev1.WithoutVerbTypeLister {
	return &withoutVerbTypeLister{
		kcplisters.New[*examplev1.WithoutVerbType](indexer, examplev1.Resource("withoutverbtype")),
	}
}

// withoutVerbTypeScopedLister can list all WithoutVerbTypes inside a workspace
// or scope down to a listersexamplev1.WithoutVerbTypeNamespaceLister for one namespace.
type withoutVerbTypeScopedLister struct {
	kcplisters.ResourceIndexer[*examplev1.WithoutVerbType]
}

// WithoutVerbTypes returns an object that can list and get WithoutVerbTypes in one namespace.
func (l *withoutVerbTypeScopedLister) WithoutVerbTypes(namespace string) listersexamplev1.WithoutVerbTypeLister {
	return &withoutVerbTypeLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
