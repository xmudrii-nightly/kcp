/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	examplev1alpha1 "acme.corp/pkg/apis/example/v1alpha1"
)

// ClusterTestTypeClusterLister helps list ClusterTestTypes across all workspaces,
// or scope down to a ClusterTestTypeLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterTestTypeClusterLister interface {
	// List lists all ClusterTestTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*examplev1alpha1.ClusterTestType, err error)
	// Cluster returns a lister that can list and get ClusterTestTypes in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterTestTypeLister
	ClusterTestTypeClusterListerExpansion
}

// clusterTestTypeClusterLister implements the ClusterTestTypeClusterLister interface.
type clusterTestTypeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*examplev1alpha1.ClusterTestType]
}

var _ ClusterTestTypeClusterLister = new(clusterTestTypeClusterLister)

// NewClusterTestTypeClusterLister returns a new ClusterTestTypeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterTestTypeClusterLister(indexer cache.Indexer) ClusterTestTypeClusterLister {
	return &clusterTestTypeClusterLister{
		kcplisters.NewCluster[*examplev1alpha1.ClusterTestType](indexer, examplev1alpha1.Resource("clustertesttype")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterTestTypes.
func (l *clusterTestTypeClusterLister) Cluster(clusterName logicalcluster.Name) ClusterTestTypeLister {
	return &clusterTestTypeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// clusterTestTypeLister can list all ClusterTestTypes inside a workspace
// or scope down to a ClusterTestTypeNamespaceLister for one namespace.
type clusterTestTypeLister struct {
	kcplisters.ResourceIndexer[*examplev1alpha1.ClusterTestType]
}

var _ ClusterTestTypeLister = new(clusterTestTypeLister)

// ClusterTestTypeLister can list all ClusterTestTypes, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterTestTypeLister interface {
	// List lists all ClusterTestTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*examplev1alpha1.ClusterTestType, err error)
	// Get retrieves the ClusterTestType from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*examplev1alpha1.ClusterTestType, error)
	ClusterTestTypeListerExpansion
}

// NewClusterTestTypeLister returns a new ClusterTestTypeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterTestTypeLister(indexer cache.Indexer) ClusterTestTypeLister {
	return &clusterTestTypeLister{
		kcplisters.New[*examplev1alpha1.ClusterTestType](indexer, examplev1alpha1.Resource("clustertesttype")),
	}
}

// clusterTestTypeScopedLister can list all ClusterTestTypes inside a workspace
// or scope down to a ClusterTestTypeNamespaceLister.
type clusterTestTypeScopedLister struct {
	kcplisters.ResourceIndexer[*examplev1alpha1.ClusterTestType]
}
