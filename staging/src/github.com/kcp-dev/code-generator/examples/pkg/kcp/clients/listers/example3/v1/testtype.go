/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	example3v1 "acme.corp/pkg/apis/example3/v1"
)

// TestTypeClusterLister helps list TestTypes across all workspaces,
// or scope down to a TestTypeLister for one workspace.
// All objects returned here must be treated as read-only.
type TestTypeClusterLister interface {
	// List lists all TestTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*example3v1.TestType, err error)
	// Cluster returns a lister that can list and get TestTypes in one workspace.
	Cluster(clusterName logicalcluster.Name) TestTypeLister
	TestTypeClusterListerExpansion
}

// testTypeClusterLister implements the TestTypeClusterLister interface.
type testTypeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*example3v1.TestType]
}

var _ TestTypeClusterLister = new(testTypeClusterLister)

// NewTestTypeClusterLister returns a new TestTypeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewTestTypeClusterLister(indexer cache.Indexer) TestTypeClusterLister {
	return &testTypeClusterLister{
		kcplisters.NewCluster[*example3v1.TestType](indexer, example3v1.Resource("testtype")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get TestTypes.
func (l *testTypeClusterLister) Cluster(clusterName logicalcluster.Name) TestTypeLister {
	return &testTypeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// testTypeLister can list all TestTypes inside a workspace
// or scope down to a TestTypeNamespaceLister for one namespace.
type testTypeLister struct {
	kcplisters.ResourceIndexer[*example3v1.TestType]
}

var _ TestTypeLister = new(testTypeLister)

// TestTypeLister can list TestTypes across all namespaces, or scope down to a TestTypeNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type TestTypeLister interface {
	// List lists all TestTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*example3v1.TestType, err error)
	// TestTypes returns a lister that can list and get TestTypes in one workspace and namespace.
	TestTypes(namespace string) TestTypeNamespaceLister
	TestTypeListerExpansion
}

// TestTypes returns an object that can list and get TestTypes in one namespace.
func (l *testTypeLister) TestTypes(namespace string) TestTypeNamespaceLister {
	return &testTypeNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// testTypeNamespaceLister implements the TestTypeNamespaceLister
// interface.
type testTypeNamespaceLister struct {
	kcplisters.ResourceIndexer[*example3v1.TestType]
}

var _ TestTypeNamespaceLister = new(testTypeNamespaceLister)

// TestTypeNamespaceLister can list all TestTypes, or get one in particular.
// All objects returned here must be treated as read-only.
type TestTypeNamespaceLister interface {
	// List lists all TestTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*example3v1.TestType, err error)
	// Get retrieves the TestType from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*example3v1.TestType, error)
	TestTypeNamespaceListerExpansion
}

// NewTestTypeLister returns a new TestTypeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewTestTypeLister(indexer cache.Indexer) TestTypeLister {
	return &testTypeLister{
		kcplisters.New[*example3v1.TestType](indexer, example3v1.Resource("testtype")),
	}
}

// testTypeScopedLister can list all TestTypes inside a workspace
// or scope down to a TestTypeNamespaceLister for one namespace.
type testTypeScopedLister struct {
	kcplisters.ResourceIndexer[*example3v1.TestType]
}

// TestTypes returns an object that can list and get TestTypes in one namespace.
func (l *testTypeScopedLister) TestTypes(namespace string) TestTypeLister {
	return &testTypeLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
